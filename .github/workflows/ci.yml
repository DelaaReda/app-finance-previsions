name: CI

on:
  push:
    branches: [ main ]
    paths:
      - "src/**"
      - "tests/**"
      - "docs/**"
      - ".github/**"
      - "pyproject.toml"
      - "requirements*.txt"
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - "src/**"
      - "tests/**"
      - "docs/**"
      - ".github/**"
      - "pyproject.toml"
      - "requirements*.txt"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-typecheck:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install -e .; fi
          pip install ruff mypy pre-commit

      - name: Pre-commit (fast checks)
        run: |
          pre-commit run --all-files || (echo "::warning::pre-commit failed locally; continue to ruff/mypy"; true)

      - name: Ruff (lint+format)
        run: |
          ruff check .
          ruff format --check .

      - name: Mypy (best-effort)
        continue-on-error: true
        env:
          MYPYPATH: src
        run: |
          mypy src || echo "::warning::mypy warnings (non bloquant)"

  tests:
    runs-on: ubuntu-latest
    needs: [lint-typecheck]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install -e .; fi
          pip install pytest pytest-cov

      - name: Pytest
        env:
          PYTHONWARNINGS: "ignore"
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov=src --cov-report=xml

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml

